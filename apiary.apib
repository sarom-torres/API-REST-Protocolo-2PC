FORMAT: 1A
HOST : http://localhost:12345

# Simulador do protocolo 2PC

A aplicação implementa o protocolo 2PC para registro e log de contas bancárias.

#Group 2PC

## Contas [/contas]

### Listar as contas e seus repectivos saldos [GET]

+ Response 200 (appĺication/json)

        {
            "contas" :[
                {
                    "numero" : "1234",
                    "saldo" : "100.00"
                },
                {
                    "numero" : "4345",
                    "saldo" : "50.00"
                },
                {
                    "numero" : "5678",
                    "saldo" : "250.00"
                }
            ]
        }

## Réplicas [/replicas]

### Carregar uma lista de réplicas [POST]

Para adicionar uma lista de máquinas réplicas. Recebe um objeto JSON contendo os dados das máquinas.
+ id (string) - Identificador único da réplica
+ endpoint (string) - Endereço IP da máquina e porta

+ Request (appĺication/json)

        {
            "replicas": [
                {
                    "id": "9aced3dd-aa11-4010-b8fa-dbfbd4fd4f6d",
                    "endpoint": "http://127.0.0.1:5000"
                },
                {
                    "id": "37e079a0-c00b-4c3b-b32c-98a71dc1d6e9",
                    "endpoint": "http://127.0.0.1/1234"
                }
            ]
        }    
      
+ Response 201 

+ Response 404


### Obter lista de réplicas [GET]
Retorna a lista de réplicas
+ Response 200 (appĺication/json)
    
    + Body
    
            {
                "replicas": [
                    {
                        "id": "9aced3dd-aa11-4010-b8fa-dbfbd4fd4f6d",
                        "endpoint": "http://127.0.0.1:5000"
                    },
                    {
                        "id": "37e079a0-c00b-4c3b-b32c-98a71dc1d6e9",
                        "endpoint": "http://127.0.0.1/1234"
                    }
                ]
            }

+ Response 404

### Excluir a lista de réplicas [DELETE]

+ Response 200
+ Response 404

## Sementes [/seed]

### Carregar semente [POST]

Para adicionar semente nos sistemas.
+ seed (string) - Valor da semente
+ Request (appĺication/json)

    + Body
    
            {
                "seed": "987246"
            }

+ Response 201

## Transações [/transacao]

### Envia ação a ser realizada pelas réplicas [POST]
Para adicionar transacoes a serem realizadas.
+ id (string) - Identificador único da transação
+ operacao (string) - Operação a ser realizada (cŕedito ou débito)
+ conta (string) - Número da conta
+ valor (string) - Valor associado à transação
+ Request (appĺication/json)
    
    + Body
    
            {
                "id": "1e7a0527-f233-4dd4-a5e4-5d007930dd19",
                "operacao": "credito",
                "conta": "1234",
                "valor": "30.00"
            }
+ Response 200
+ Response 201
+ Response 403

### Confirmar transação [PUT]
Para confirmar a transação.
+ id (string) - Identificador da transação
+ Request (appĺication/json)

    + Body
    
            {
                "id": "9aced3dd-aa11-4010-b8fa-dbfbd4fd4f6d"
            }

+ Response 200
+ Response 400
+ Response 404

### Cancelar transação [DELETE]
Para cancelar a transação.
+ id (string) - Identificador da transação
+ Request (appĺication/json)

    + Body
    
            {
                "id": "9aced3dd-aa11-4010-b8fa-dbfbd4fd4f6d"
            }

+ Response 200
+ Response 400
+ Response 404
## Histórico [/historico]

### Obter histórico de ações processadas [GET]
Para obter id e status de todas operações processadas

+ Response 200 (appĺication/json)

    + Body
    
            {
                "acoes": [
                    {
                    "id": "1e7a0527-f233-4dd4-a5e4-5d007930dd19",
                    "status": "fail"
                    },
                    {
                    "id": "2b41abfd-2f57-4b04-8e23-ac98d37fce65",
                    "status": "success"
                    }
                ]
            }